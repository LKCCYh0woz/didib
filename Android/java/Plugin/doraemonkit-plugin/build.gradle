apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
//apply from: '../../upload.gradle'

sourceSets {
    main {
        java {
            srcDirs += []
        }
        kotlin {
            srcDirs += ['src/main/kotlin', 'src/main/java']
        }
    }


}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
}

def archives_type = rootProject.ext.publish_config["archives_type"]
def gradlePluginVersion
if (archives_type == 2) {
    gradlePluginVersion = rootProject.ext.android["jcenter_gradle_plugin_version"]
} else {
    gradlePluginVersion = rootProject.ext.android["gradle_plugin_version"]
}

dependencies {
    compileOnly gradleApi()
    compileOnly localGroovy()

    //版本不能太高 否则会跟项目的as版本冲突
    compileOnly "com.android.tools.build:gradle:$gradlePluginVersion"
    /* 👇👇👇👇 引用这两个模块 👇👇👇👇 */
    api "com.didiglobal.booster:booster-api:${rootProject.ext.android["booster_version"]}"
    api "com.didiglobal.booster:booster-transform-asm:${rootProject.ext.android["booster_version"]}"
}

/**
 * 删除指定目录下的文件
 */
task deleteSource(type: Delete) {
    delete './src/main/kotlin'
}

/**
 * 将buildSrc中的代码同步到doraemonkit-plugin中
 */
task copyPluginSource(type: Copy, dependsOn: deleteSource) {
    println("===copySource start===")
   // from './../buildSrc/src/main/kotlin'
   // into './src/main/kotlin'
    println("===copySource end===")
}

def PUBLISH_ARCHIVES_TYPE = rootProject.ext.publish_config["archives_type"]
if (PUBLISH_ARCHIVES_TYPE == 0 || PUBLISH_ARCHIVES_TYPE == 1) {
    uploadArchives.dependsOn(copyPluginSource)
} else {
    publish.dependsOn(['copyPluginSource'])
}


apply plugin: 'java-gradle-plugin'

gradlePlugin {
    plugins {
        version {
            // 在 app 模块需要通过 id 引用这个插件
            id = 'com.didi.dokit.debug'
            // 实现这个插件的类的路径
            implementationClass = 'com.didichuxing.doraemonkit.plugin.DoKitPlugin'
        }
    }
}
