// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    apply from: "config.gradle"
    def archives_type = rootProject.ext.publish_config["archives_type"]
    def runType = rootProject.ext.publish_config["run_type"]
    def dokitPluginVersion = rootProject.ext.publish_config["version"]
    def kotlinVersion = rootProject.ext.android["kotlin_version"]
    def gradlePluginVersion
    if (archives_type == 2) {
        gradlePluginVersion = rootProject.ext.android["jcenter_gradle_plugin_version"]
    } else {
        gradlePluginVersion = rootProject.ext.android["gradle_plugin_version"]
    }

    repositories {
        google()
        mavenCentral()
        jcenter()
        maven {
            url "https://oss.sonatype.org/content/groups/public"
        }
//        maven { url 'http://artifactory.intra.xiaojukeji.com/artifactory/public' }
        maven {
            //本地插件地址
            url uri('/Users/didi/project/dokit_repo')
        }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$gradlePluginVersion"
        //jcenter
        classpath "com.novoda:bintray-release:0.9.2"
        // MavenCentral
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:1.4.30"
        if (runType == 1) {
            classpath "io.github.didi.dokit:dokitx-plugin:$dokitPluginVersion"
        }
        //classpath "com.didiglobal.booster:booster-task-compression-pngquant:${rootProject.ext.android["booster_version"]}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
//        classpath "com.didiglobal.booster:booster-gradle-plugin:3.3.1"
//        classpath "com.didiglobal.booster:booster-task-analyser:3.3.1"
    }

}

allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter()
        maven {
            url "https://oss.sonatype.org/content/groups/public"
        }
//        maven { url 'http://artifactory.intra.xiaojukeji.com/artifactory/public' }
        maven {
            //本地插件地址
            url uri('/Users/didi/project/dokit_repo')
        }
    }
}

task clean(type: Delete) {
    doLast {
        delete rootProject.buildDir
    }
}

/**
 * 删除指定目录下的文件
 */
task deleteSource(type: Delete) {
    doLast {
        println("===delete Plugin Source start===")
        delete "${project.rootDir}/doraemonkit-plugin/src/main/kotlin"
        println("===delete Plugin Source end===")
    }
}

/**
 * 将buildSrc中的代码同步到doraemonkit-plugin中
 */
task copyPluginSource(type: Copy, dependsOn: deleteSource) {
    doLast {
        println("===copy Plugin Source start===")
        from "${project.rootDir}/buildSrc/src/main/kotlin"
        into "${project.rootDir}/doraemonkit-plugin/src/main/kotlin"
        include('**/*')
        println("===copy Plugin Source end===")
    }
}

/**
 * 打包上传配置检查
 */
task checkUploadConfig() {
    doLast {
        if (rootProject.ext.publish_config["archives_type"] != 3) {
            throw new RuntimeException("执行打包上传任务必须修改config.gradle配置中的archives_type = 3。")
        }
    }
}


//project.tasks.whenTaskAdded { Task theTask ->
//    if (theTask.name == 'assembleRelease') {
//        theTask.mustRunAfter(":doraemonkit-plugin:assemble")
//    }
//}

//解决打包时由于javadocRelease校验引起的打包失败
//tasks.getByPath(":doraemonkit:javadocRelease").enabled = false
//tasks.getByPath(":doraemonkit-no-op:javadocRelease").enabled = false
//tasks.getByPath(":doraemonkit-leakcanary:javadocRelease").enabled = false
//tasks.getByPath(":doraemonkit-weex:javadocRelease").enabled = false
//tasks.getByPath(":doraemonkit-rpc:javadocRelease").enabled = false
